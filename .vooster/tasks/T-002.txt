# Supabase 기반 데이터베이스/인증/기초 관리자 기능 세팅

**Task ID:** T-002
**Status:** DONE
**Importance:** MUST
**Complexity:** 6/10
**Urgency:** 8/10
**Dependencies:** T-001

## Description

### 설명
Supabase를 사용하여 프로젝트의 백엔드 인프라를 구축합니다. TRD에 명시된 데이터베이스 스키마를 생성하고, 사용자 인증(Supabase Auth), 데이터 보안(RLS), 그리고 관리자를 위한 기본 FAQ 관리 기능을 설정합니다.

### 구현 상세
1.  **Supabase 프로젝트 설정**: Supabase 대시보드에서 새 프로젝트를 생성하고, API URL과 키를 `.env.local` 파일에 환경 변수로 저장합니다. (`NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`, `SUPABASE_SERVICE_ROLE_KEY`)
2.  **데이터베이스 스키마 적용**: TRD에 제공된 SQL DDL을 Supabase SQL Editor에서 실행하여 `patients`, `reservations`, `consultations`, `faqs`, `knowledge_base` 등 모든 테이블과 `vector` 확장을 생성합니다.
3.  **인증(Auth) 설정**: Supabase Auth에서 이메일/비밀번호 기반 인증을 활성화합니다. 필요시 소셜 로그인 제공자(예: 카카오)를 설정합니다.
4.  **보안 정책(RLS) 적용**: TRD에 명시된 대로 `patients`, `reservations` 등 개인정보 포함 테이블에 RLS(Row Level Security) 정책을 적용하여, 사용자는 자신의 데이터에만 접근할 수 있도록 제한합니다.
5.  **관리자 FAQ CRUD UI**: 관리자 전용 페이지(`/admin/faq`)를 생성합니다. 이 페이지에서 `faqs` 테이블의 데이터를 조회, 생성, 수정, 삭제(CRUD)할 수 있는 UI를 `shadcn/ui` 컴포넌트와 `react-hook-form`, `zod`를 사용하여 구현합니다.

### 테스트 전략
1.  **DB 연결 테스트**: Supabase 클라이언트 라이브러리(`@supabase/ssr`)를 사용하여 Next.js 서버/클라이언트 컴포넌트에서 데이터 조회가 정상적으로 이루어지는지 확인합니다.
2.  **인증 테스트**: 테스트 계정으로 회원가입, 로그인, 로그아웃 기능이 정상 동작하는지 확인합니다.
3.  **RLS 정책 검증**: 두 개의 다른 테스트 계정으로 로그인하여, 한 사용자가 다른 사용자의 예약 정보나 상담 내역을 조회할 수 없는지 확인합니다.
4.  **CRUD 기능 테스트**: 관리자 페이지에서 FAQ를 생성하고, 목록에 즉시 반영되는지 확인합니다. 수정 및 삭제 기능도 동일하게 검증합니다.

---

**Created:** 2025-07-29T04:44:49.562Z
**Updated:** 2025-08-05T11:21:17.180Z
