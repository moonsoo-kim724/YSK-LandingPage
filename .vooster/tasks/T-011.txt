# 다국어(i18n) 지원 기능 구현 (KO/EN)

**Task ID:** T-011
**Status:** BACKLOG
**Importance:** MUST
**Complexity:** 7/10
**Urgency:** 7/10
**Dependencies:** T-001

## Description

### 설명
PRD 요구사항에 따라 웹사이트에 한국어(기본값)와 영어(추가)를 지원하는 다국어(i18n) 기능을 구현합니다. 사용자는 언어 전환 UI를 통해 선호하는 언어를 선택할 수 있으며, 선택된 언어는 URL 경로(e.g., `/en/about`)에 반영되어 SEO 친화적인 구조를 가집니다. 이 작업은 `next-intl` 라이브러리를 사용하여 Next.js 14의 App Router 환경에 최적화된 방식으로 진행합니다.

### 구현 상세
1.  **라이브러리 설치**: `pnpm install next-intl` 명령어로 라이브러리를 설치합니다.
2.  **i18n 설정 파일 생성**: 프로젝트 루트에 `i18n.ts` 파일을 생성하여 지원할 로케일 목록(`['ko', 'en']`)과 기본 로케일(`'ko'`)을 정의합니다.
3.  **번역 메시지 파일 관리**: `messages` 디렉토리를 생성하고, 내부에 `ko.json`과 `en.json` 파일을 만들어 각 언어별 UI 텍스트를 키-값 형태로 관리합니다.
4.  **미들웨어 설정**: 프로젝트 루트에 `middleware.ts` 파일을 생성합니다. `next-intl`에서 제공하는 미들웨어를 사용하여 요청 URL을 분석하고, 로케일 접두사를 자동으로 처리하도록 설정합니다. 이를 통해 `/about`은 `/ko/about`으로, `/en/about`은 영어 페이지로 라우팅됩니다.
5.  **동적 라우트 적용**: `app/[locale]` 형태의 동적 라우트 디렉토리 구조를 생성하여 모든 페이지가 로케일 파라미터를 받도록 수정합니다. `layout.tsx`와 `page.tsx`에서 `params: {locale}`을 받아 사용합니다.
6.  **언어 전환 UI 개발**: 헤더나 푸터에 언어 전환을 위한 드롭다운 또는 버튼 그룹 컴포넌트를 `shadcn/ui`를 활용하여 개발합니다. `usePathname`, `useRouter` 훅을 사용해 현재 경로를 유지하면서 로케일만 변경하는 링크를 생성합니다.
7.  **콘텐츠 적용**: 페이지 컴포넌트에서 `useTranslations` 훅을 사용하여 `json` 파일에 정의된 번역 문자열을 불러와 렌더링합니다. `layout.tsx`에서는 `<html>` 태그의 `lang` 속성을 현재 로케일에 맞게 동적으로 설정하여 접근성을 준수합니다.

### 테스트 전략
*   **단위 테스트**: 언어 전환 컴포넌트가 로케일 변경을 올바르게 트리거하고, 올바른 URL로 이동시키는지 Jest와 React Testing Library로 테스트합니다.
*   **통합 테스트**: 특정 URL(e.g., `/en/contact`)로 직접 접근했을 때, 해당 언어의 콘텐츠가 정상적으로 렌더링되는지 확인합니다. `next-intl/server`를 사용한 서버 컴포넌트의 번역 기능이 올바르게 동작하는지 검증합니다.
*   **E2E 테스트**: Playwright 또는 Cypress를 사용하여 사용자가 언어 전환 버튼을 클릭하고, 전체 페이지의 언어가 변경되며, URL이 업데이트되는 전체 흐름을 테스트합니다. 페이지 소스 보기(View Source)를 통해 `<html>`의 `lang` 속성과 `hreflang` 메타 태그가 올바르게 설정되었는지 확인하여 SEO 요건을 검증합니다.

---

**Created:** 2025-07-30T01:28:32.479Z
**Updated:** 2025-07-30T01:28:32.479Z
